#include <stdio.h>
#include <stdlib.h>

// Define the structure for a binary tree node
typedef struct TreeNode {
    int value;             // The value stored in the node
    struct TreeNode* left; // Pointer to the left child node
    struct TreeNode* right;// Pointer to the right child node
} TreeNode;

// Function to create a new node
TreeNode* createNode(int value) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the binary search tree
TreeNode* insertNode(TreeNode* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->value) {
        root->left = insertNode(root->left, value);
    } else {
        root->right = insertNode(root->right, value);
    }
    return root;
}

// Function to perform in-order traversal of the binary tree
void printInOrder(TreeNode* node) {
    if (node == NULL) {
        return;
    }
    printInOrder(node->left);  // Traverse left subtree
    printf("%d ", node->value); // Visit root node
    printInOrder(node->right); // Traverse right subtree
}

// Function to free the memory allocated for the tree
void freeTree(TreeNode* node) {
    if (node == NUL
